/*
    
    200 number of islands
    
*/

var numIslands = function(M) {
    if (!M || M.length === 0 || !M[0] || M[0].length === 0) {
        return 0;
    }
    
    var grid = new Array(M.length), i, j;
    for (i = 0; i < grid.length; i++) {
        grid[i] = new Array(M[0].length);
        for (j = 0; j < grid[i].length; j++) {
            grid[i][j] = {visited: false}; // may need to modify this state later
        }
    }
    
    var stack = [], island = 0, cur, maxRow = grid.length - 1, maxCol = grid[0].length - 1;
    for (i = 0; i < grid.length; i++) {
        for (j = 0; j < grid[0].length; j++) {
            if (M[i][j] == 1 && !grid[i][j].visited) {
                island++;
                stack.push({row: i, col: j});
                while (stack.length > 0) {
                    cur = stack.pop();
                    grid[cur.row][cur.col].visited = true;
                    if (cur.row - 1 >= 0 && M[cur.row - 1][cur.col] == 1 && !grid[cur.row - 1][cur.col].visited) {
                        stack.push({row: cur.row - 1, col: cur.col});
                    }
                    
                    if (cur.col + 1 <= maxCol && M[cur.row][cur.col + 1] == 1 && !grid[cur.row][cur.col + 1].visited) {
                        stack.push({row: cur.row, col: cur.col + 1});
                    }
                    
                    if (cur.row + 1 <= maxRow && M[cur.row + 1][cur.col] == 1 && !grid[cur.row + 1][cur.col].visited) {
                        stack.push({row: cur.row + 1, col: cur.col});
                    }
                    
                    if (cur.col - 1 >= 0 && M[cur.row][cur.col - 1] == 1 && !grid[cur.row][cur.col - 1].visited) {
                        stack.push({row: cur.row, col: cur.col - 1})
                    }
                }
            }
        }
    }
    
    return island;
};