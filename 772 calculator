/*
    772 basic calculator III
*/
/*
    "1 + 1" = 2
    " 6-4 / 2 " = 4
    "2*(5+5*2)/3+(6/2+8)" = 21
    "(2+6* 3+5- (3*14/7+2)*5)+3"=-12
*/
/*
    having two stacks one for operator, the other for operant. use two variables to track the current operant (you will need to keep adding digits to it). when you see a operant, you should push the current operator to the stack and compare the current operator with the previous operator on the top of the operator stack. if the previous operator has higher priority, if needs to be used. now you grab the top two elements from the operant stack and calculate them using the top operator and put the result back to the operant stack. then you need to keep calculating using the operants and operators in the stacks until there is only one operant left. 
    
    the reason for this logic is as follow. if you have a series of operators that has the same priority, the previous one will always be calculated, so you will always have only one operant and one operator (this is a special case for the calculator, and you don't even need stacks, just two variables would be enough). now you get a operator with higher priority, to use this operator, you need to wait for the second operant, which you will discover when you see the next operator. in this case, you put the current operator on the stack and keep gathering the digits for your next operant. when you next operant is discovered (you will looking at the next operator at this point), regardless of the priority of your curent operator (because you only have 2 priorities, your previous operator's priority is higher, that's why it didn't get calculated immediately), you need start calculating the previous operator. then you might still have another operator in the stack with a lower priority, so that needs to be compared with your current operator, if they have the same priority, you need to keep calculating whatever left in the stack until you have only one operant left, otherwise; you need to put the current operator in the stack and continue.
    
    1 + 1 * 2 + 3. in this case, your stacks will look like the following (the * is not in the stack yet as you are currently looking at it to decide what to do). since * has higher priority, you should push it to the stack and keep looking.
    1 1 
    +   *
    
    when you discover the next operator, your stacks will look like the following. now since your previous operator has higher priority, you need to calculate it first and push the result back to the operant stack. after this step, your stack will look like. now your current operator has the same priority as the one on the stack, so you need to keep calculating until you've used all operators in the stack, and push the current operator onto the operator stack and you will have the following stacks.
    1 1 2
    + *   +
    
    1 3
    +  +
    
    4
    +
    
    if you take one step back and assume you've got another * after the first *, after using the first *, your stacks will look like, now since your current operator has higher priority than the one on the top of the operator stack, you should push this operator and continue.
    1 3
    +   *
    
    1 3
    + *
    
    what if you get higher priority operators first? you stacks will look like
    1 * 1 + 2 + 3
    
    1 1
    *   +
    -------
    1 3
    +   end
    --------
    4
    
    in case of 1 * 1 + 2 * 3. your stacks will look like
    1 1
    *  +
    ------
    1 2
    +   *
    -------
    1 2 3
    + *   end
    -------
    1 6
    +
    -------
    7
    
    if you have other operators after 3. your stacks will look like
    1 2 3
    + *   calculate the previous operator anyway and compare the pre previous operator with your current operator
*/

/*
    what if you have to deal with nested parenthesis? you can make the function that handles unnested cases as a recursion functions.
    2 * ( 5 + 5 * 2 ) / 3 + ( 6 / ( 2 + 8 ) )
    a pair of () will indicate another recursion layer, which may have other nested () pairs as well. noticing that a n opening parenthesis will always follow a operator and a closing parenthesis will always followed by a parenthesis, ideally your recursion function will calculate one single pair of parenthesis as a operant and you can just treated like you've got a regular operant. 
    
    you can start the recursion when you've discovered a opening parenthesis, and treat the closing parenthesis as the end of your current level of recursive calculation. 
*/

var calculate = function(s) {
 return calculateRecursion(s, 0);
}

function calculateRecursion(s, low) {
    var i = low, operant = 0, operatorStack = [], operantStack = [];
    for (i = low; i <= nums.length; i++) {
        if (i === nums.length) {
            operant.push(operant);
            calculateAllInStack(operantStack, operatorStack);
        }
        
        cur = s[i];
        if (/\d/.test(cur)) {
            operant = operant * 10 + parseInt(cur, 10);
        } else if (cur === " "){
            continue;
        } else if (cur === "(") {
            operantStack.push(calculateRecursion(s, i+1));
        } else if (cur === ")") {
            operantStack.push(operant); 
            calculateAllInStack(operantStack, operatorStack);
        } else {
            operantStack.push(operant);
            operant = 0;
            var top = operatorStack[operatorStack.length - 1];
            while (top && priorityHigher(top, cur)){
                var rightOp = operantStack.pop();
                operantStack.push(basicCalculate(operantStack.pop(), operatorStack.pop(), rightOp));
                top = operatorStack[operatorStack.length - 1];
            }
            
            operatorStack.push(cur);
        }
    }
    
    return operantStack.pop();
}

function calculateAllInStack(operantStack, operatorStack) {
    var operant = 0;
    while (operantStack.length > 0) {
        var rightOp = operantStack.pop();
        operantStack.push(basicCalculate(operantStack.pop(), operatorStack.pop(), rightOp));
    }
    
    return;
}

function basicCalculate(opr1, op, opr2) {
    if (op === "+") {
        return opr1 + opr2;
    } else if (op === "-") {
        return opr1 - opr2;
    } else if (op === "*") {
        return opr1 * opr2;
    } else {
        return Math.ceil(opr1 / opr2);
    }
}

function priorityHigher(op1, op2) {
    if (op1 === "*" || op1 === "/") {
        return op2 === "+" || op2 === "-";
    } else {
        return false;
    }
}



/*
    accepted 121ms
*/

/**
 * @param {string} s
 * @return {number}
 */
var calculate = function(s) {
    var count = {val: 0};
    return calculateRecursion(s, 0, count);
}

function calculateRecursion(s, low, count) {
    var i = low, operant = 0, operatorStack = [], operantStack = [];
    for (i = low; i <= s.length; i++) {
        count.val++;
        if (i === s.length) {
            operantStack.push(operant);
            calculateAllInStack(operantStack, operatorStack);
            return operantStack.pop();
        }
        
        cur = s[i];
        if (/\d/.test(cur)) {
            operant = operant * 10 + parseInt(cur, 10);
        } else if (cur === " "){
            continue;
        } else if (cur === "(") {
            var _preCount = count.val;
            count.val = 0;
            operant = calculateRecursion(s, i+1, count);
            i += count.val;
            count.val += _preCount;    
        } else if (cur === ")") {
            operantStack.push(operant);
            calculateAllInStack(operantStack, operatorStack);
            return operantStack.pop();
        } else {
            operantStack.push(operant);
            operant = 0;
            var top = operatorStack[operatorStack.length - 1];
            while (top && priorityHigherOrEqual(top, cur)){
                var rightOp = operantStack.pop();
                operantStack.push(basicCalculate(operantStack.pop(), operatorStack.pop(), rightOp));
                top = operatorStack[operatorStack.length - 1];
            }
            
            operatorStack.push(cur);
        }
    }
}

function calculateAllInStack(operantStack, operatorStack) {
    var operant = 0;
    while (operantStack.length > 1) {
        var rightOp = operantStack.pop();
        operantStack.push(basicCalculate(operantStack.pop(), operatorStack.pop(), rightOp));
    }
    
    return;
}

function basicCalculate(opr1, op, opr2) {
    if (op === "+") {
        return opr1 + opr2;
    } else if (op === "-") {
        return opr1 - opr2;
    } else if (op === "*") {
        return opr1 * opr2;
    } else {
        return Math.floor(opr1 / opr2);
    }
}

function priorityHigherOrEqual(op1, op2) {
    if (op1 === "*" || op1 === "/") {
        return true;
    } else {
        return op2 === "+" || op2 === "-";
    }
}

/*
    bugs and coding issues between the first version and the accepted version:
    1. major bug: forget to track the length of the nested formula. you will need this to leap the index i forward so you skip the nested layer that's been taken care of by the recursion call.
    2. after the length tracking is introduced, it won't work for the multi layer nested parenthesis. the correct logic to track the inner layer's length is:
    a. before jumping into the recursion, cache whatever you've calculated. 
    b. when the fucntions returns from the recursion, move i exactly count.val steps forward (to the end of the formula), then add the previous cached length back to count.val (this is forgotten in the code)
    3. after pushing operant onto the operant stack, forget to reset it back to zero.
*/

/*
    key take-aways:
    1. using two stacks for caculator problems, one for operant, the other for operator
    2. the collision processing of a stack when you have a chain of operators with the same priority
    3. using recursion to handle the nested layer while keeping track of the length of the formula the recursion function will process for you
    
*/























